version: "3"
services:

  frontend:
    container_name: frontend
    env_file: .env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"

# backend
  gateway:
    container_name: gateway
    env_file: .env
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    image: gateway
    restart: unless-stopped
    networks:
      - backend

  chat:
    container_name: chat
    env_file: .env
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    image: chat
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres

  login:
    container_name: login
    env_file: .env
    build:
      context: ./backend/login
      dockerfile: Dockerfile
    image: login
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres

  profile:
    container_name: profile
    env_file: .env
    build:
      context: ./backend/profile
      dockerfile: Dockerfile
    image: profile
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres

  score:
    container_name: score
    env_file: .env
    build:
      context: ./backend/score
      dockerfile: Dockerfile
    image: "score"
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres

  game:
    container_name: game
    env_file: .env
    build:
      context: ./backend/game
      dockerfile: Dockerfile
    image: game
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres
  
  postgres:
    container_name: postgres
    env_file: .env
    build:
      context: ./backend/database
      dockerfile: Dockerfile
    restart: always
    volumes:
      - "db_volume:/var/lib/postgresql"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - backend

  reverseproxy:
    container_name: reverseproxy
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - backend
    depends_on: 
     - gateway

networks:
  backend:
    name: backend
    driver: bridge

volumes:
  db_volume:



