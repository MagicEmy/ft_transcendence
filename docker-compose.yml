version: "3"
services:

  frontend:
    container_name: frontend
    env_file: .env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - "./frontend:/app" #only for developement
      - "/app/node_modules"
    ports:
      - "3000:3000"
    depends_on:
      - auth
      - game_service
      - stats_service
      - user_service

# backend
  gateway:
    container_name: gateway
    env_file: .env
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    image: gateway
    volumes:
    - "./backend/gateway:/app" #only for developement
    - "/app/node_modules"
    networks:
    - backend
    restart: unless-stopped
    ports:
      - "3001:3000"
  
  game_service:
    container_name: game_service
    env_file: 
    - .env
    - .env.profile-db
    build:
      context: ./backend/game-service
      dockerfile: Dockerfile
    image: game_service
    volumes:
      - "./backend/game-service:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3007:3000" #only for testing porposes
    depends_on:
      profile_db:
        condition: service_healthy

  user_service:
    container_name: user_service
    env_file: 
    - .env
    - .env.profile-db
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    image: user_service
    volumes:
      - "./backend/user-service:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3008:3000" #only for testing porposes
    depends_on:
      profile_db:
        condition: service_healthy
  
  stats_service:
    container_name: stats_service
    env_file: 
    - .env
    - .env.profile-db
    build:
      context: ./backend/stats-service
      dockerfile: Dockerfile
    image: stats_service
    volumes:
      - "./backend/stats-service:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3009:3000" #only for testing porposes
    depends_on:
      profile_db:
        condition: service_healthy

  chat:
    container_name: chat
    env_file: 
    - .env
    - .env.chat-db
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    image: chat
    volumes:
      - "./backend/chat:/app" # for development only
      - "/app/node_modules"
    restart: unless-stopped
    ports:
      - "3005:3000" # only for testing purposes
    networks:
      - backend
    depends_on:
      - chat_db

  auth:
    container_name: auth
    env_file: 
    - .env
    - .env.profile-db
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    image: auth
    volumes:
    - "./backend/auth:/app" # only for development
    - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3003:3000" # only for testing purposes
    depends_on:
      - profile_db
      - kafka

  game:
    container_name: game
    env_file: .env
    build:
      context: ./backend/game
      dockerfile: Dockerfile
    image: game
    volumes:
      - "./backend/game:/app" #only for developement
      - "/app/node_modules"
    ports:
      - "3006:3000" #only for testing porposes
    restart: unless-stopped
    networks:
      - backend

# databases
  profile_db:
    container_name: profile_db
    env_file: 
    - .env
    - .env.profile-db
    build:
      context: ./database
      dockerfile: Dockerfile
    image: postgres
    restart: always
    volumes:
      - "profile_db_volume:/var/lib/postgresql"
    networks:
      - backend
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3

  chat_db:
    container_name: chat_db
    env_file: 
    - .env
    - .env.chat-db
    build:
      context: ./database
      dockerfile: Dockerfile
    image: postgres
    restart: always
    volumes:
      - "chat_db_volume:/var/lib/postgresql"
    networks:
      - backend
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3

# kafka
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    networks:
      - backend
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - backend
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
      KAFKAJS_NO_PARTITIONER_WARNING: "1"

  # reverseproxy:
  #   container_name: reverseproxy
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #   networks:
  #     - backend
  #   depends_on:
  #    - gateway


networks:
  backend:
    name: backend
    driver: bridge

volumes:
  profile_db_volume:
  chat_db_volume:



