version: "3"
services:

#   frontend:
#     container_name: frontend
#     env_file: .env
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     image: frontend
#     restart: unless-stopped
#     ports:
#       - "3000:3000"

# # backend
  gateway:
    container_name: gateway
    env_file: .env
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    image: gateway
    restart: unless-stopped
    networks:
      - backend

  chat:
    container_name: chat
    env_file: .env
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    image: chat
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres

#   login:
#     container_name: login
#     env_file: .env
#     build:
#       context: ./backend/login
#       dockerfile: Dockerfile
#     image: login
#     restart: unless-stopped
#     networks:
#       - backend
#     depends_on:
#       - postgres

#   profile:
#     container_name: profile
#     env_file: .env
#     build:
#       context: ./backend/profile
#       dockerfile: Dockerfile
#     image: profile
#     restart: unless-stopped
#     networks:
#       - backend
#     depends_on:
#       - postgres

#   score:
#     container_name: score
#     env_file: .env
#     build:
#       context: ./backend/score
#       dockerfile: Dockerfile
#     image: "score"
#     restart: unless-stopped
#     networks:
#       - backend
#     depends_on:
#       - postgres

#   game:
#     container_name: game
#     env_file: .env
#     build:
#       context: ./backend/game
#       dockerfile: Dockerfile
#     image: game
#     restart: unless-stopped
#     networks:
#       - backend
#     depends_on:
#       - postgres
  
  postgres:
    container_name: postgres
    env_file: .env
    build:
      context: ./backend/database
      dockerfile: Dockerfile
    restart: always
    volumes:
      - "db_volume:/var/lib/postgresql"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
  

  reverseproxy:
    container_name: reverseproxy
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - backend
    depends_on: 
     - gateway

networks:
  backend:
    name: backend
    driver: bridge

volumes:
  db_volume:



