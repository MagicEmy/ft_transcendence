version: "3"
services:

  frontend:
    container_name: frontend
    env_file: .env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend
    volumes:
      - "./frontend:/app" #only for developement
    restart: unless-stopped
    ports:
      - "3000:3000"

# backend
  api_gateway:
    container_name: api_gateway
    env_file: .env
    build:
      context: ./backend/APIgateway
      dockerfile: Dockerfile
    image: api_gateway
    volumes:
      - "./backend/APIgateway:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    ports:
      - "443:443"
    networks:
      - backend

  chat:
    container_name: chat
    env_file: .env
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    image: chat
    volumes:
      - "./backend/chat:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3004:3000" #only for testing porposes
    depends_on:
      - chat_db

  chat_db:
    container_name: chat_db
    env_file: .env
    image: postgres:latest
    restart: always
    volumes:
      - "chat_volume:/var/lib/postgresql"
    networks:
      - backend


  login:
    container_name: login
    env_file: .env
    build:
      context: ./backend/login
      dockerfile: Dockerfile
    image: login
    volumes:
      - "./backend/login:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3001:3000" #only for testing porposes
    depends_on:
      - login_db
  
  login_db:
    container_name: login_db
    env_file: .env
    image: postgres:latest
    restart: always
    volumes:
      - "login_volume:/var/lib/postgresql"
    networks:
      - backend


  profile:
    container_name: profile
    env_file: .env
    build:
      context: ./backend/profile
      dockerfile: Dockerfile
    image: profile
    volumes:
      - "./backend/profile:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3002:3000" #only for testing porposes
    depends_on:
      - profile_db
  
  profile_db:
    container_name: profile_db
    env_file: .env
    image: postgres:latest
    restart: always
    volumes:
      - "profile_volume:/var/lib/postgresql"
    networks:
      - backend


  score:
    container_name: score
    env_file: .env
    build:
      context: ./backend/score
      dockerfile: Dockerfile
    image: "score"
    volumes:
      - "./backend/score:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3003:3000" #only for testing porposes
    depends_on:
      - score_db
  
  score_db:
    container_name: score_db
    env_file: .env
    image: postgres:latest
    restart: always
    volumes:
      - "score_volume:/var/lib/postgresql"
    networks:
      - backend

  game:
    container_name: game
    env_file: .env
    build:
      context: ./backend/game
      dockerfile: Dockerfile
    image: game
    volumes:
      - "./backend/game:/app" #only for developement
      - "/app/node_modules"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "3006:3000" #only for testing porposes
    depends_on:
      - game_db
  
  game_db:
    container_name: game_db
    env_file: .env
    image: postgres:latest
    restart: always
    volumes:
      - "game_volume:/var/lib/postgresql"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181" #only for dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - backend

#kafka ui reachable at port 8080
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - backend


networks:
  backend:
    name: backend
    driver: bridge


volumes:
  chat_volume:
  game_volume:
  login_volume:
  profile_volume:
  score_volume:


